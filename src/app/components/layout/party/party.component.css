.gridContainer {
    display: grid;
    height: 100%;
    margin-right: .5rem;
    grid-template-columns: auto;
    grid-template-rows: 40% 40% 5.5% 14.5%;
    justify-content: stretch;
    grid-template-areas:
        "character1"
        "character2"
        "dps"
        "options";

    -moz-user-select: -moz-none;
    -khtml-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.dps {
    grid-area: dps;
}

.dpsChecks {
    display: flex;
    justify-content: space-around;
    margin: .15rem 0;
}

.partyDps {
    align-self: center;
    font-weight: bold;
    color: var(--positive-status-effect);
}

.enemyDps {
    align-self: center;
    font-weight: bold;
    color: #FF6478;
}

.smallText {
    font-size: 1rem;
}

.character1 {
    grid-area: character1;
    height: 100%;
}

.character2 {
    grid-area: character2;
    height: 100%;
}

.options {
    grid-area: options;
    height: 100%;
}

.characterBar {
    width: 100%;
    /*margin-right: .5rem;*/
    display: inline-block;
    height: 1rem;
}

.partyMember {
    height: 95%;

    /* needs to match item target size and location */
    border: 2px solid var(--background-default);
}

.hpMpText {
    font-size: .7475rem;
    font-weight: bold;
}

.characterGrid {
    display: grid;
    height: 100%;
    grid-template-columns: 60% 40%;
    grid-template-rows: 1fr;
    justify-content: stretch;
    grid-template-areas:
        "characterInfo abilities";
}

.characterInfo {
    grid-area: characterInfo;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.abilities {
    grid-area: abilities;
}

/*.abilityGrid {
    display: grid;
    margin: .5rem;
    height: 100%;
    grid-template-columns: 1fr;
    grid-template-rows: 25% 25% 25% 25%;
    justify-content: stretch;
    grid-template-areas:
      "autoAttack"
      "ability1"
      "ability2"
      "ability3";
}*/

.abilityGrid {
    display: grid;
    margin: .1rem .5rem;
    height: 100%;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    justify-content: stretch;
    grid-template-areas:
        "autoAttack ability1 ability2"
        "god1ability1 god1ability2 god1ability3"
        "god2ability1 god2ability2 god2ability3";
}

.autoAttack {
    grid-area: autoAttack;
}

.ability1 {
    grid-area: ability1;
}

.ability2 {
    grid-area: ability2;
}

.ability3 {
    grid-area: ability3;
}

.god1ability1 {
    grid-area: god1ability1;
}

.god1ability2 {
    grid-area: god1ability2;
}

.god1ability3 {
    grid-area: god1ability3;
}

.god2ability1 {
    grid-area: god2ability1;
}

.god2ability2 {
    grid-area: god2ability2;
}

.god2ability3 {
    grid-area: god2ability3;
}

.battleItemGrid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr;
    justify-content: stretch;
    grid-template-areas:
        "battleItem1 battleItem2 battleItem3 battleItem4";
    gap: 14.75%;
}

.battleItem1 {
    grid-area: battleItem1;
}

.battleItem2 {
    grid-area: battleItem2;
}

.battleItem3 {
    grid-area: battleItem3;
}

.battleItem4 {
    grid-area: battleItem4;
}

.battleItem {
    display: flex;
    align-self: center;
    flex-direction: column;
}

.abilityBreakoutGrid {
    display: grid;
    grid-template-columns: 2fr 1fr .5fr;
    grid-template-rows: 1fr;
    justify-content: stretch;
    grid-template-areas:
        "abilityName abilityTimer abilitySwap";
}

.abilityName {
    grid-area: abilityName;
}

.abilityTimer {
    grid-area: abilityTimer;
}

.abilitySwap {
    grid-area: abilitySwap;
}

.mdc-linear-progress__bar-inner {
    height: 1rem !important;
    border-top-width: var(--mdc-linear-progress-track-height, 1rem);
}

.spinner {
    display: inline-block;
    vertical-align: middle;
}

.flex {
    display: flex;
}

.overdriveActive {
    color: var(--overdriveColor);
}

.characterTargeted:hover,
.targetModeActive {
    border: 2px solid red !important;
}

.xps {
    align-self: center;
    font-weight: bold;
    color: var(--battle-update-text);
}

.itemImage {
    width: 100%;
    height: 100%;
}

.battleItemButton {
    position: relative;
}

.cancelBattleItemButton {
    width: 100%;
    font-size: .75rem;
    margin-top: .15rem;
}

.itemAmount {
    position: absolute;
    bottom: 0;
    right: .1rem;
}

::ng-deep .mat-menu-panel {
    background: var(--background-light);
}

.selectableItem {
    border: 2px solid black;
}


table {
    table-layout: fixed;
    width: 100%;
    height: 100%;
    text-align: center;
}

td {
    width: 25%;
    border: 1px solid rgba(0, 0, 0, .1);
    border-right: none;
}

table tr td:last-child,
table tr td:nth-last-child(2),
table tr td:nth-last-child(3),
table tr td:nth-last-child(4) {
    border-bottom: none;
}

table tr:nth-child(1) td:nth-child(-n+4) {
    border-top: none;
}

table tr td:nth-child(4n) {
    border-right: none;
}

table tr td:nth-child(4n-3) {
    border-left: none;
}

.manualOverdriveMode {
    opacity: .3;
}

.manualOverdriveText {
    position: absolute;
    z-index: 5;
    opacity: 1;
    text-align: center;
    width: 74.2%;
    /* needs to match .characterBar */
    bottom: .1rem;
    height: 1rem;
}

.overdriveBar {
    position: relative;
}

.overdriveProgressBar {
    width: 74.2%;
    margin-right: .5rem;
}

.characterHp {
    display: grid;
    grid-template-columns: 74.2% 1fr;
    column-gap: .3rem;
    justify-content: stretch;
    grid-template-areas:
        "hpBar hpAmount";
}

/*.boss .characterBar, .enemy .characterBar {
    width: 95% !important;
}
*/
.hpBarSpace {
    grid-area: hpBar;
}

.hpAmount {
    grid-area: hpAmount;
}


.hpBarGrid {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    justify-content: stretch;
    grid-template-areas:
        "hpBarSlot";
}

.hpBar {
    grid-area: hpBarSlot;
}

.linkText {
    font-size: .85rem;
    text-align: center;
    color: var(--linkText);
}

.marginLeft {
    margin-left: 1rem;
}

@media (max-width: 800px) {
    .gridContainer {
        grid-template-rows: auto 1fr 1fr;
        justify-content: stretch;
        grid-template-areas:
            "hr"
            "character1"
            "character2";
    }

    .hr {
        grid-area: hr;
        width: 100%;
    }

    .fullHeight {
        height: 100%;
    }

    .overdriveProgressBar {
        width: 68%;
    }

    .characterHp {
        grid-template-columns: 68% 1fr;
    }

    .manualOverdriveText {
        width: 68%;
    }

    .hpMpText {
        font-size: .9rem;
    }

    .characterTargeted:hover,
    .targetModeActive {
        border: 2px solid var(--background-default) !important;
    }

    .abilityGrid {
        height: 96%;        
    }
    
}